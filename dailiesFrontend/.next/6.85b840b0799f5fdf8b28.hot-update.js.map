{"version":3,"file":"6.85b840b0799f5fdf8b28.hot-update.js","sources":["webpack:///pages/dailydata.js"],"sourcesContent":["import React, { Component } from 'react';\r\n//import axios from 'axios';\r\nimport {credentials} from './credentials';\r\nimport ReactDOM from 'react-dom';\r\nimport Modal from 'react-modal';\r\nimport {weblinks} from './weblinks';\r\nimport axios from 'axios';\r\n\r\n//import dailydatastyles from './styles/dailydatastyles.css'\r\n\r\n//DailyData: will contain the data for the user's dailies\r\n//contains view that will load the information\r\n//also a textbox, time in which the daily resets, and submit button\r\n\r\n//TODO: eventually implement daylight savings\r\n//TODO: switch statement per game since JSON's per game is case by case\r\n//TODO: specific games would need their own class to display data in DailyDataBox\r\n\r\n\r\nconst customStyles = {\r\n    content : {\r\n        top                   : '50%',\r\n        left                  : '50%',\r\n        right                 : 'auto',\r\n        bottom                : 'auto',\r\n        marginRight           : '-50%',\r\n        transform             : 'translate(-50%, -50%)',\r\n        height                : '500px',\r\n        overflow              : 'auto'\r\n      }\r\n};\r\n\r\n//Modal.setAppElement(el)\r\n\r\n//needs to display that and handle delete button\r\n//needs more css to move button to the right\r\nclass ModalRow extends Component {\r\n    render(){\r\n        const data = this.props.data;\r\n        const title = data.title;\r\n        return(\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <button>remove</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n//query database for info add to row and loop\r\nclass ModalContainer extends Component {\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n    state = {\r\n        rows:[]\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({rows:DATA});\r\n    }\r\n\r\n    render(){\r\n        const display = [];\r\n        this.state.rows.forEach((row)=>{\r\n            display.push(<ModalRow data={row} key={row.title}/>);\r\n        });\r\n        return(\r\n            <div>{display}</div>\r\n        );\r\n    }\r\n}\r\n\r\nclass DailyRow extends Component{\r\n    render(){\r\n        const data = this.props.data;\r\n        const title = data.title;\r\n\r\n        return(\r\n            <tr>\r\n                <td>{title}</td>\r\n                <td>{data.time_to_reset}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nclass AddDailyInformation extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            modalIsOpen: false\r\n        };\r\n        this.openModal = this.openModal.bind(this);\r\n        this.afterOpenModal = this.afterOpenModal.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    };\r\n\r\n    componentWillMount(){\r\n        Modal.setAppElement('body');\r\n    }\r\n\r\n    openModal(){\r\n        this.setState({modalIsOpen:true});\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({modalIsOpen:false});\r\n    }\r\n\r\n    afterOpenModal(){\r\n        this.subtitle.style.color = '#f00';\r\n    }\r\n//TODO: Modal submit needs to add to games in backend\r\n    render(){\r\n        let button;\r\n        if(this.props.showAddButton){\r\n            button = <button type=\"button\" onClick={this.openModal}>Click to edit dailies</button>;\r\n        }\r\n        return(\r\n            <div>\r\n                <h1>{button}</h1>\r\n                <Modal\r\n                    isOpen={this.state.modalIsOpen}\r\n                    onAfterOpen={this.state.afterOpenModal}\r\n                    onRequestClose={this.closeModal}\r\n                    style={customStyles}\r\n                    contentLabel=\"Modify daily menu\"\r\n                >\r\n                    <h2 ref={subtitle => this.subtitle = subtitle}>Add Game Daily</h2>\r\n                      <button onClick={this.closeModal}>close</button>\r\n                      <div>Please input daily name and time of reset</div>\r\n                      <form>\r\n                        <input />\r\n                        <input type=\"time\"/>\r\n                        <button>submit</button>\r\n                      </form>\r\n                      <div>\r\n                        <ModalContainer/>\r\n                      </div>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAddDailyInformation.defaultProps = {\r\n    showAddButton: true\r\n};\r\n\r\nclass DailyInformation extends Component {\r\n    render(){\r\n        const rows = [];\r\n        console.log(\"dailyInformation\");\r\n        console.log(this.props.data.data.title);\r\n        //TODO: fix response from database\r\n        /*\r\n        this.props.data.data.forEach((data)=>{\r\n            rows.push(\r\n                <DailyRow data={data} key={data.title}/>\r\n            );\r\n        })\r\n        */\r\n        return(\r\n            <table>\r\n                <thread>\r\n                    <tr>\r\n                        <th>Title</th>\r\n                        <th>Is completed</th>\r\n                    </tr>\r\n                </thread>\r\n                <tbody>{rows}</tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nclass DailyDataBox extends Component {\r\n    state = {\r\n        dailyData:[]\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios({\r\n            method: 'post',\r\n            url: weblinks.link.getDailies,\r\n            data: {\r\n                username: credentials.user.username,\r\n                token: credentials.user.token,\r\n            },\r\n        })\r\n        .then(function (response){\r\n            //okay reponse on accept and fail here\r\n            //console.log(response);\r\n            if(response.data != \"incorrect username or password\"){\r\n                this.setState({dailyData:response});\r\n            }\r\n        }.bind(this))\r\n        .catch(function (error){\r\n            //if error do just clear fields and display mismatch user or password\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    render(){\r\n        console.log(\"token\");\r\n        console.log(credentials.user.token);\r\n        return(\r\n            <div>\r\n                <DailyInformation data={this.state.dailyData} />\r\n                <AddDailyInformation showAddButton={this.props.showAddButton}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n/*\r\nconst DATA = [\r\n    {title: 'Overwatch', date: new Date(), time_to_reset: 5, dailies_completed: false},\r\n    {title: 'GW2', date: new Date(), time_to_reset: 5, dailies_completed: false},\r\n    {title: 'TF2', date: new Date(), time_to_reset: 5, dailies_completed: false},\r\n    {title: 'Dragalia', date: new Date(), time_to_reset: 5, dailies_completed: false},\r\n    {title: 'Spooky\\'s House', date: new Date(), time_to_reset: 5, dailies_completed: false}\r\n];\r\n*/\r\nexport default DailyDataBox;\r\n\n\n\n// WEBPACK FOOTER //\n// pages/dailydata.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAeA;AACA;AACA;AAAA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAVA;AACA;AACA;AAWA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAKA;AADA;AAJA;AAAA;AAEA;AACA;;;AAKA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AArBA;AACA;AAuBA;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAXA;AACA;AAaA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAxDA;AACA;AA0DA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAxBA;AACA;AA0BA;;;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AASA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AApCA;AAsCA;;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}